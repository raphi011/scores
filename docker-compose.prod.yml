version: "3.6"

services:
  frontend:
    build:
      dockerfile: ./dockerfiles/deploy/frontend
      context: .
    environment:
      - BACKEND_URL=http://backend:8080 # Internal Docker Backend

  backend:
    build:
      dockerfile: ./dockerfiles/deploy/backend
      context: .
    volumes:
      - "~/data/api:/srv/scores"
    command:
      - "-connection"
      - "postgres://postgres:test@localhost?sslmode=disable"
      - "-provider"
      - "postgres"
      - "-goauth"
      - "/srv/scores/client_secret.json"
    environment:
      - GIN_MODE=release
      - BACKEND_URL=https://scores.network
      - APP_ENV=production

  envoy:
    build:
      dockerfile: ./dockerfiles/deploy/envoy
      context: .
    volumes:
      - "~/data/letsencrypt:/usr/share/letsencrypt/scores.network"
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8001:8001"

  db:
    volumes:
      - "~/data/postgres:/var/lib/postgresql/data"

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: test@test.at
      PGADMIN_DEFAULT_PASSWORD: test
    ports:
      - "127.0.0.1:81:80"

  elasticsearch:
    build:
      dockerfile: "./dockerfiles/deploy/elasticsearch"
      context: .
      args:
        ELK_VERSION: $ELK_VERSION
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    volumes:
      - "~/data/elasticsearch:/usr/share/elasticsearch/data"

  kibana:
    build:
      dockerfile: "./dockerfiles/deploy/kibana"
      context: .
      args:
        ELK_VERSION: $ELK_VERSION
    ports:
      - "127.0.0.1:5601:5601"
    depends_on:
      - elasticsearch

  logstash:
    build:
      dockerfile: "./dockerfiles/deploy/logstash"
      context: .
      args:
        ELK_VERSION: $ELK_VERSION
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
